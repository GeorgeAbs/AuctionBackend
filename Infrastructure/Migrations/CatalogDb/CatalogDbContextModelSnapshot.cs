// <auto-generated />
using System;
using Infrastructure.Data.CatalogDbContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations.CatalogDb
{
    [DbContext(typeof(CatalogDbContext))]
    partial class CatalogDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("auction")
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CatalogBoolPropertyItemTrading", b =>
                {
                    b.Property<Guid>("BoolPropertiesId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ItemsId")
                        .HasColumnType("uuid");

                    b.HasKey("BoolPropertiesId", "ItemsId");

                    b.HasIndex("ItemsId");

                    b.ToTable("CatalogBoolPropertyItemTrading", "auction");
                });

            modelBuilder.Entity("CatalogStringPropertyItemTrading", b =>
                {
                    b.Property<Guid>("ItemsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StringPropertiesId")
                        .HasColumnType("uuid");

                    b.HasKey("ItemsId", "StringPropertiesId");

                    b.HasIndex("StringPropertiesId");

                    b.ToTable("CatalogStringPropertyItemTrading", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Addresses.ItemAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("AddressTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Flat")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PostIndex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("Addresses", "auction");
                });

            modelBuilder.Entity("Domain.Entities.AuctionSlots.ItemTradingAuctionSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AuctionEndingTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("AuctionSlotNum")
                        .HasColumnType("integer");

                    b.Property<float>("BlitzPrice")
                        .HasColumnType("real");

                    b.Property<Guid>("CatalogCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("MinimumBid")
                        .HasColumnType("real");

                    b.Property<DateTime>("PendingOrderFormingStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.Property<float>("StartPrice")
                        .HasColumnType("real");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CatalogCategoryId");

                    b.ToTable("ItemTradingAuctionSlots", "auction");
                });

            modelBuilder.Entity("Domain.Entities.AuctionSlots.ItemTradingAuctionSlotStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("ItemTradingAuctionSlotId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ItemTradingAuctionSlotId");

                    b.ToTable("ItemTradingAuctionSlotStatusHistories", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Basket.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Baskets", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Basket.BasketItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.ToTable("BasketItems", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Bid.ItemTradingBid", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<float>("BidAmount")
                        .HasColumnType("real");

                    b.Property<Guid>("BidOwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BidSlotId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("BidSlotId");

                    b.ToTable("Bids", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentCatalogCategoryId")
                        .HasColumnType("uuid");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ParentCatalogCategoryId");

                    b.ToTable("CatalogCategories", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogProperty.CatalogBoolProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsInUsing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ItemTradingAuctionSlotId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PropertyNameId")
                        .HasColumnType("uuid");

                    b.Property<string>("PropertyValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SystemValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemTradingAuctionSlotId");

                    b.HasIndex("PropertyNameId");

                    b.HasIndex("SystemValue")
                        .IsUnique();

                    b.ToTable("CatalogItemBoolProperties", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogProperty.CatalogFloatProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsInUsing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ItemTradingAuctionSlotId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PropertyNameId")
                        .HasColumnType("uuid");

                    b.Property<float>("PropertyValue")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemTradingAuctionSlotId");

                    b.HasIndex("PropertyNameId");

                    b.HasIndex("PropertyValue");

                    b.ToTable("CatalogItemFloatProperties", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogProperty.CatalogIntProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsInUsing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ItemTradingAuctionSlotId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PropertyNameId")
                        .HasColumnType("uuid");

                    b.Property<int>("PropertyValue")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemTradingAuctionSlotId");

                    b.HasIndex("PropertyNameId");

                    b.HasIndex("PropertyValue");

                    b.ToTable("CatalogItemIntProperties", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogProperty.CatalogPropertiesNames.CatalogBoolPropertyName", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CatalogCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CatalogCategoryId");

                    b.HasIndex("SystemName")
                        .IsUnique();

                    b.ToTable("CatalogBoolPropertyNames", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogProperty.CatalogPropertiesNames.CatalogFloatPropertyName", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CatalogCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CatalogCategoryId");

                    b.HasIndex("SystemName")
                        .IsUnique();

                    b.ToTable("CatalogFloatPropertyNames", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogProperty.CatalogPropertiesNames.CatalogIntPropertyName", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CatalogCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CatalogCategoryId");

                    b.HasIndex("SystemName")
                        .IsUnique();

                    b.ToTable("CatalogIntPropertyNames", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogProperty.CatalogPropertiesNames.CatalogStringPropertyName", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CatalogCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CatalogCategoryId");

                    b.HasIndex("SystemName")
                        .IsUnique();

                    b.ToTable("CatalogStringPropertyNames", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogProperty.CatalogStringProperty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsInUsing")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVisible")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ItemTradingAuctionSlotId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PropertyNameId")
                        .HasColumnType("uuid");

                    b.Property<string>("PropertyValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SystemValue")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemTradingAuctionSlotId");

                    b.HasIndex("PropertyNameId");

                    b.HasIndex("SystemValue")
                        .IsUnique();

                    b.ToTable("CatalogItemStringProperties", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Comments.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CommentedItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("WriterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CommentedItemId");

                    b.ToTable("Comments", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Images.AttachmentImage<Domain.Entities.Comments.Comment>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BigImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("OwnerEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("SmallImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerEntityId");

                    b.ToTable("CommentsImages", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Images.AttachmentImage<Domain.Entities.Reviews.Review>", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BigImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("OwnerEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("SmallImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerEntityId");

                    b.ToTable("ReviewImages", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Images.BannerImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("BannerType")
                        .HasColumnType("integer");

                    b.Property<string>("BigImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SmallImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("BannerImages", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Images.ItemTradingImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BigImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OwnerEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("SmallImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerEntityId");

                    b.ToTable("ItemsTradingsImages", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Images.ItemTradingSlotImage", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BigImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OwnerEntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("SmallImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("OwnerEntityId");

                    b.ToTable("ItemsTradingsSlotsImages", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Images.ShopLogo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BigImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OwnerEntity")
                        .HasColumnType("uuid");

                    b.Property<string>("SmallImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ShopsLogos", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Images.UserLogo", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("BigImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OwnerEntity")
                        .HasColumnType("uuid");

                    b.Property<string>("SmallImagePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("UsersLogos", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Items.ItemTrading.ItemTrading", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AuctionEndingTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("BlockedQuantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("CatalogCategoryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<int>("DaysForShipment")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DesignPromotionType")
                        .HasColumnType("integer");

                    b.Property<int>("FreeQuantity")
                        .HasColumnType("integer");

                    b.Property<bool>("IsPromotedByPriority")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("MaxPrice")
                        .HasColumnType("real");

                    b.Property<float>("MinPrice")
                        .HasColumnType("real");

                    b.Property<int[]>("PaymentMethods")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<DateTime>("PromotionByDesignStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("PromotionByPriorityStartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SellingType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StatusChangingLastTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CatalogCategoryId");

                    b.HasIndex("MaxPrice");

                    b.HasIndex("MinPrice");

                    b.HasIndex("Status");

                    b.ToTable("ItemsTrading", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Items.ItemTrading.ItemTradingStatusHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemTradingStatusHistories", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Messages.ItemTradingAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ItemTradingQuestionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MessageOwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WriterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ItemTradingQuestionId")
                        .IsUnique();

                    b.HasIndex("MessageOwnerId");

                    b.ToTable("ItemTradingAnswers", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Messages.ItemTradingQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MessageOwnerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WriterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("MessageOwnerId");

                    b.ToTable("ItemTradingQuestions", "auction");
                });

            modelBuilder.Entity("Domain.Entities.ModerationDisappReason.ItemTradingModerationDisappReason", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ModeratorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemTradingModerationDisappReasons", "auction");
                });

            modelBuilder.Entity("Domain.Entities.PaymentMethods.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PaymentType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods", "auction");
                });

            modelBuilder.Entity("Domain.Entities.Reviews.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("LastModifiedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("WriterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reviews", "auction");
                });

            modelBuilder.Entity("CatalogBoolPropertyItemTrading", b =>
                {
                    b.HasOne("Domain.Entities.Catalog.CatalogProperty.CatalogBoolProperty", null)
                        .WithMany()
                        .HasForeignKey("BoolPropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Items.ItemTrading.ItemTrading", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CatalogStringPropertyItemTrading", b =>
                {
                    b.HasOne("Domain.Entities.Items.ItemTrading.ItemTrading", null)
                        .WithMany()
                        .HasForeignKey("ItemsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Catalog.CatalogProperty.CatalogStringProperty", null)
                        .WithMany()
                        .HasForeignKey("StringPropertiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Addresses.ItemAddress", b =>
                {
                    b.HasOne("Domain.Entities.Items.ItemTrading.ItemTrading", "Item")
                        .WithMany("ShipmentAddresses")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Domain.Entities.AuctionSlots.ItemTradingAuctionSlot", b =>
                {
                    b.HasOne("Domain.Entities.Catalog.CatalogCategory", "CatalogCategory")
                        .WithMany()
                        .HasForeignKey("CatalogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogCategory");
                });

            modelBuilder.Entity("Domain.Entities.AuctionSlots.ItemTradingAuctionSlotStatusHistory", b =>
                {
                    b.HasOne("Domain.Entities.AuctionSlots.ItemTradingAuctionSlot", null)
                        .WithMany("StatusHistories")
                        .HasForeignKey("ItemTradingAuctionSlotId");
                });

            modelBuilder.Entity("Domain.Entities.Basket.BasketItem", b =>
                {
                    b.HasOne("Domain.Entities.Basket.Basket", "Basket")
                        .WithMany("Items")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");
                });

            modelBuilder.Entity("Domain.Entities.Bid.ItemTradingBid", b =>
                {
                    b.HasOne("Domain.Entities.AuctionSlots.ItemTradingAuctionSlot", "BidSlot")
                        .WithMany("Bids")
                        .HasForeignKey("BidSlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BidSlot");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogCategory", b =>
                {
                    b.HasOne("Domain.Entities.Catalog.CatalogCategory", "ParentCatalogCategory")
                        .WithMany("ChildrenCatalogCategories")
                        .HasForeignKey("ParentCatalogCategoryId");

                    b.Navigation("ParentCatalogCategory");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogProperty.CatalogBoolProperty", b =>
                {
                    b.HasOne("Domain.Entities.AuctionSlots.ItemTradingAuctionSlot", null)
                        .WithMany("BoolProperties")
                        .HasForeignKey("ItemTradingAuctionSlotId");

                    b.HasOne("Domain.Entities.Catalog.CatalogProperty.CatalogPropertiesNames.CatalogBoolPropertyName", "PropertyName")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyName");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogProperty.CatalogFloatProperty", b =>
                {
                    b.HasOne("Domain.Entities.Items.ItemTrading.ItemTrading", "Item")
                        .WithMany("FloatProperties")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.AuctionSlots.ItemTradingAuctionSlot", null)
                        .WithMany("FloatProperties")
                        .HasForeignKey("ItemTradingAuctionSlotId");

                    b.HasOne("Domain.Entities.Catalog.CatalogProperty.CatalogPropertiesNames.CatalogFloatPropertyName", "PropertyName")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("PropertyName");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogProperty.CatalogIntProperty", b =>
                {
                    b.HasOne("Domain.Entities.Items.ItemTrading.ItemTrading", "Item")
                        .WithMany("IntProperties")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.AuctionSlots.ItemTradingAuctionSlot", null)
                        .WithMany("IntProperties")
                        .HasForeignKey("ItemTradingAuctionSlotId");

                    b.HasOne("Domain.Entities.Catalog.CatalogProperty.CatalogPropertiesNames.CatalogIntPropertyName", "PropertyName")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("PropertyName");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogProperty.CatalogPropertiesNames.CatalogBoolPropertyName", b =>
                {
                    b.HasOne("Domain.Entities.Catalog.CatalogCategory", "CatalogCategory")
                        .WithMany("CatalogBoolPropertyNames")
                        .HasForeignKey("CatalogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogCategory");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogProperty.CatalogPropertiesNames.CatalogFloatPropertyName", b =>
                {
                    b.HasOne("Domain.Entities.Catalog.CatalogCategory", "CatalogCategory")
                        .WithMany("CatalogFloatPropertyNames")
                        .HasForeignKey("CatalogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogCategory");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogProperty.CatalogPropertiesNames.CatalogIntPropertyName", b =>
                {
                    b.HasOne("Domain.Entities.Catalog.CatalogCategory", "CatalogCategory")
                        .WithMany("CatalogIntPropertyNames")
                        .HasForeignKey("CatalogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogCategory");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogProperty.CatalogPropertiesNames.CatalogStringPropertyName", b =>
                {
                    b.HasOne("Domain.Entities.Catalog.CatalogCategory", "CatalogCategory")
                        .WithMany("CatalogStringPropertyNames")
                        .HasForeignKey("CatalogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogCategory");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogProperty.CatalogStringProperty", b =>
                {
                    b.HasOne("Domain.Entities.AuctionSlots.ItemTradingAuctionSlot", null)
                        .WithMany("StringProperties")
                        .HasForeignKey("ItemTradingAuctionSlotId");

                    b.HasOne("Domain.Entities.Catalog.CatalogProperty.CatalogPropertiesNames.CatalogStringPropertyName", "PropertyName")
                        .WithMany("Properties")
                        .HasForeignKey("PropertyNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PropertyName");
                });

            modelBuilder.Entity("Domain.Entities.Comments.Comment", b =>
                {
                    b.HasOne("Domain.Entities.Items.ItemTrading.ItemTrading", "CommentedItem")
                        .WithMany("Comments")
                        .HasForeignKey("CommentedItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommentedItem");
                });

            modelBuilder.Entity("Domain.Entities.Images.AttachmentImage<Domain.Entities.Comments.Comment>", b =>
                {
                    b.HasOne("Domain.Entities.Comments.Comment", "OwnerEntity")
                        .WithMany("Images")
                        .HasForeignKey("OwnerEntityId");

                    b.Navigation("OwnerEntity");
                });

            modelBuilder.Entity("Domain.Entities.Images.AttachmentImage<Domain.Entities.Reviews.Review>", b =>
                {
                    b.HasOne("Domain.Entities.Reviews.Review", "OwnerEntity")
                        .WithMany()
                        .HasForeignKey("OwnerEntityId");

                    b.Navigation("OwnerEntity");
                });

            modelBuilder.Entity("Domain.Entities.Images.ItemTradingImage", b =>
                {
                    b.HasOne("Domain.Entities.Items.ItemTrading.ItemTrading", "OwnerEntity")
                        .WithMany("Images")
                        .HasForeignKey("OwnerEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerEntity");
                });

            modelBuilder.Entity("Domain.Entities.Images.ItemTradingSlotImage", b =>
                {
                    b.HasOne("Domain.Entities.AuctionSlots.ItemTradingAuctionSlot", "OwnerEntity")
                        .WithMany("Images")
                        .HasForeignKey("OwnerEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerEntity");
                });

            modelBuilder.Entity("Domain.Entities.Items.ItemTrading.ItemTrading", b =>
                {
                    b.HasOne("Domain.Entities.Catalog.CatalogCategory", "CatalogCategory")
                        .WithMany("ItemsTrading")
                        .HasForeignKey("CatalogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CatalogCategory");
                });

            modelBuilder.Entity("Domain.Entities.Items.ItemTrading.ItemTradingStatusHistory", b =>
                {
                    b.HasOne("Domain.Entities.Items.ItemTrading.ItemTrading", "Item")
                        .WithMany("ItemTradingStatusHistories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Domain.Entities.Messages.ItemTradingAnswer", b =>
                {
                    b.HasOne("Domain.Entities.Messages.ItemTradingQuestion", "Question")
                        .WithOne("Answer")
                        .HasForeignKey("Domain.Entities.Messages.ItemTradingAnswer", "ItemTradingQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Items.ItemTrading.ItemTrading", "MessageOwner")
                        .WithMany()
                        .HasForeignKey("MessageOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageOwner");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Domain.Entities.Messages.ItemTradingQuestion", b =>
                {
                    b.HasOne("Domain.Entities.Items.ItemTrading.ItemTrading", "MessageOwner")
                        .WithMany("Questions")
                        .HasForeignKey("MessageOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageOwner");
                });

            modelBuilder.Entity("Domain.Entities.ModerationDisappReason.ItemTradingModerationDisappReason", b =>
                {
                    b.HasOne("Domain.Entities.Items.ItemTrading.ItemTrading", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Domain.Entities.AuctionSlots.ItemTradingAuctionSlot", b =>
                {
                    b.Navigation("Bids");

                    b.Navigation("BoolProperties");

                    b.Navigation("FloatProperties");

                    b.Navigation("Images");

                    b.Navigation("IntProperties");

                    b.Navigation("StatusHistories");

                    b.Navigation("StringProperties");
                });

            modelBuilder.Entity("Domain.Entities.Basket.Basket", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogCategory", b =>
                {
                    b.Navigation("CatalogBoolPropertyNames");

                    b.Navigation("CatalogFloatPropertyNames");

                    b.Navigation("CatalogIntPropertyNames");

                    b.Navigation("CatalogStringPropertyNames");

                    b.Navigation("ChildrenCatalogCategories");

                    b.Navigation("ItemsTrading");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogProperty.CatalogPropertiesNames.CatalogBoolPropertyName", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogProperty.CatalogPropertiesNames.CatalogFloatPropertyName", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogProperty.CatalogPropertiesNames.CatalogIntPropertyName", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Domain.Entities.Catalog.CatalogProperty.CatalogPropertiesNames.CatalogStringPropertyName", b =>
                {
                    b.Navigation("Properties");
                });

            modelBuilder.Entity("Domain.Entities.Comments.Comment", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("Domain.Entities.Items.ItemTrading.ItemTrading", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("FloatProperties");

                    b.Navigation("Images");

                    b.Navigation("IntProperties");

                    b.Navigation("ItemTradingStatusHistories");

                    b.Navigation("Questions");

                    b.Navigation("ShipmentAddresses");
                });

            modelBuilder.Entity("Domain.Entities.Messages.ItemTradingQuestion", b =>
                {
                    b.Navigation("Answer");
                });
#pragma warning restore 612, 618
        }
    }
}
